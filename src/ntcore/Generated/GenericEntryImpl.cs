// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

using System;
using NetworkTables.Handles;
using NetworkTables.Natives;

namespace NetworkTables;

/** NetworkTables generic implementation. */
internal sealed class GenericEntryImpl<THandle> : EntryBase<THandle>, IGenericEntry where THandle : struct, INtEntryHandle
{
    /**
     * Constructor.
     *
     * @param topic Topic
     * @param handle Native handle
     */
    internal GenericEntryImpl(Topic topic, THandle handle) : base(handle)
    {
        Topic = topic;
    }

    public override Topic Topic { get; }

    public NetworkTableValue Get()
    {
        return NtCore.GetEntryValue(Handle);
    }

    /**
     * Gets the entry's value as a bool. If the entry does not exist or is of different type, it
     * will return the default value.
     *
     * @param defaultValue the value to be returned if no value is found
     * @return the entry's value or the given default value
     */

    public bool GetBoolean(bool defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsBoolean)
        {
            return value.GetBoolean();
        }
        return defaultValue;
    }

    /**
     * Gets the entry's value as a long. If the entry does not exist or is of different type, it
     * will return the default value.
     *
     * @param defaultValue the value to be returned if no value is found
     * @return the entry's value or the given default value
     */

    public long GetInteger(long defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsInteger)
        {
            return value.GetInteger();
        }
        return defaultValue;
    }

    /**
     * Gets the entry's value as a float. If the entry does not exist or is of different type, it
     * will return the default value.
     *
     * @param defaultValue the value to be returned if no value is found
     * @return the entry's value or the given default value
     */

    public float GetFloat(float defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsFloat)
        {
            return value.GetFloat();
        }
        return defaultValue;
    }

    /**
     * Gets the entry's value as a double. If the entry does not exist or is of different type, it
     * will return the default value.
     *
     * @param defaultValue the value to be returned if no value is found
     * @return the entry's value or the given default value
     */

    public double GetDouble(double defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsDouble)
        {
            return value.GetDouble();
        }
        return defaultValue;
    }

    /**
     * Gets the entry's value as a string. If the entry does not exist or is of different type, it
     * will return the default value.
     *
     * @param defaultValue the value to be returned if no value is found
     * @return the entry's value or the given default value
     */

    public string GetString(string defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsString)
        {
            return value.GetString();
        }
        return defaultValue;
    }

    /**
     * Gets the entry's value as a byte[]. If the entry does not exist or is of different type, it
     * will return the default value.
     *
     * @param defaultValue the value to be returned if no value is found
     * @return the entry's value or the given default value
     */

    public byte[] GetRaw(byte[] defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsRaw)
        {
            return value.GetRaw();
        }
        return defaultValue;
    }

    /**
     * Gets the entry's value as a bool[]. If the entry does not exist or is of different type, it
     * will return the default value.
     *
     * @param defaultValue the value to be returned if no value is found
     * @return the entry's value or the given default value
     */

    public bool[] GetBooleanArray(bool[] defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsBooleanArray)
        {
            return value.GetBooleanArray();
        }
        return defaultValue;
    }

    /**
     * Gets the entry's value as a long[]. If the entry does not exist or is of different type, it
     * will return the default value.
     *
     * @param defaultValue the value to be returned if no value is found
     * @return the entry's value or the given default value
     */

    public long[] GetIntegerArray(long[] defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsIntegerArray)
        {
            return value.GetIntegerArray();
        }
        return defaultValue;
    }

    /**
     * Gets the entry's value as a float[]. If the entry does not exist or is of different type, it
     * will return the default value.
     *
     * @param defaultValue the value to be returned if no value is found
     * @return the entry's value or the given default value
     */

    public float[] GetFloatArray(float[] defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsFloatArray)
        {
            return value.GetFloatArray();
        }
        return defaultValue;
    }

    /**
     * Gets the entry's value as a double[]. If the entry does not exist or is of different type, it
     * will return the default value.
     *
     * @param defaultValue the value to be returned if no value is found
     * @return the entry's value or the given default value
     */

    public double[] GetDoubleArray(double[] defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsDoubleArray)
        {
            return value.GetDoubleArray();
        }
        return defaultValue;
    }

    /**
     * Gets the entry's value as a string[]. If the entry does not exist or is of different type, it
     * will return the default value.
     *
     * @param defaultValue the value to be returned if no value is found
     * @return the entry's value or the given default value
     */

    public string[] GetStringArray(string[] defaultValue)
    {
        NetworkTableValue value = NtCore.GetEntryValue(Handle);
        if (value.IsStringArray)
        {
            return value.GetStringArray();
        }
        return defaultValue;
    }


    public NetworkTableValue[] ReadQueue()
    {
        return NtCore.ReadQueueValue(Handle);
    }


    public bool Set(in NetworkTableValue value)
    {
        return NtCore.SetEntryValue(Handle, value);
    }

    public bool Set(in RefNetworkTableValue value)
    {
        return NtCore.SetEntryValue(Handle, value);
    }

    /**
     * Sets the entry's value.
     *
     * @param value the value that will be assigned
     * @return False if the table key already exists with a different type
     * @throws IllegalArgumentException if the value is not a known type
     */

    public bool SetValue<T>(T value)
    {
        return SetValue(0, value);
    }

    public bool SetValue<T>(long time, T value)
    {
        return value switch
        {
            NetworkTableValue v => Set(v),
            bool v => Set(NetworkTableValue.MakeBoolean(time, v)),
            double v => Set(NetworkTableValue.MakeDouble(time, v)),
            float v => Set(NetworkTableValue.MakeFloat(time, v)),
            string v => Set(NetworkTableValue.MakeString(time, v)),
            bool[] v => Set(NetworkTableValue.MakeBooleanArray(time, v)),
            double[] v => Set(NetworkTableValue.MakeDoubleArray(time, v)),
            float[] v => Set(NetworkTableValue.MakeFloatArray(time, v)),
            string[] v => Set(NetworkTableValue.MakeStringArray(time, v)),
            byte[] v => Set(NetworkTableValue.MakeRaw(time, v)),
            _ => throw new InvalidOperationException($"Value of type {value?.GetType().Name} cannot be put into a table")
        };
    }

    /**
     * Sets the entry's value.
     *
     * @param value the value to set
     * @return False if the entry exists with a different type
     */

    public bool SetBoolean(bool value)
    {
        return SetBoolean(0, value);
    }

    public bool SetBoolean(long time, bool value)
    {
        return NtCore.SetEntryValue(Handle, NetworkTableValue.MakeBoolean(time, value));
    }

    /**
     * Sets the entry's value.
     *
     * @param value the value to set
     * @return False if the entry exists with a different type
     */

    public bool SetInteger(long value)
    {
        return SetInteger(0, value);
    }

    public bool SetInteger(long time, long value)
    {
        return NtCore.SetEntryValue(Handle, NetworkTableValue.MakeInteger(time, value));
    }

    /**
     * Sets the entry's value.
     *
     * @param value the value to set
     * @return False if the entry exists with a different type
     */

    public bool SetFloat(float value)
    {
        return SetFloat(0, value);
    }

    public bool SetFloat(long time, float value)
    {
        return NtCore.SetEntryValue(Handle, NetworkTableValue.MakeFloat(time, value));
    }

    /**
     * Sets the entry's value.
     *
     * @param value the value to set
     * @return False if the entry exists with a different type
     */

    public bool SetDouble(double value)
    {
        return SetDouble(0, value);
    }

    public bool SetDouble(long time, double value)
    {
        return NtCore.SetEntryValue(Handle, NetworkTableValue.MakeDouble(time, value));
    }

    /**
     * Sets the entry's value.
     *
     * @param value the value to set
     * @return False if the entry exists with a different type
     */

    public bool SetString(string value)
    {
        return SetString(0, value);
    }

    public bool SetString(long time, string value)
    {
        return NtCore.SetEntryValue(Handle, NetworkTableValue.MakeString(time, value));
    }

    /**
     * Sets the entry's value.
     *
     * @param value the value to set
     * @return False if the entry exists with a different type
     */

    public bool SetRaw(byte[] value)
    {
        return SetRaw(0, value);
    }

    public bool SetRaw(long time, byte[] value)
    {
        return NtCore.SetEntryValue(Handle, NetworkTableValue.MakeRaw(time, value));
    }

    /**
     * Sets the entry's value.
     *
     * @param value the value to set
     * @return False if the entry exists with a different type
     */

    public bool SetBooleanArray(bool[] value)
    {
        return SetBooleanArray(0, value);
    }

    public bool SetBooleanArray(long time, bool[] value)
    {
        return NtCore.SetEntryValue(Handle, NetworkTableValue.MakeBooleanArray(time, value));
    }

    /**
     * Sets the entry's value.
     *
     * @param value the value to set
     * @return False if the entry exists with a different type
     */

    public bool SetIntegerArray(long[] value)
    {
        return SetIntegerArray(0, value);
    }

    public bool SetIntegerArray(long time, long[] value)
    {
        return NtCore.SetEntryValue(Handle, NetworkTableValue.MakeIntegerArray(time, value));
    }

    /**
     * Sets the entry's value.
     *
     * @param value the value to set
     * @return False if the entry exists with a different type
     */

    public bool SetFloatArray(float[] value)
    {
        return SetFloatArray(0, value);
    }

    public bool SetFloatArray(long time, float[] value)
    {
        return NtCore.SetEntryValue(Handle, NetworkTableValue.MakeFloatArray(time, value));
    }

    /**
     * Sets the entry's value.
     *
     * @param value the value to set
     * @return False if the entry exists with a different type
     */

    public bool SetDoubleArray(double[] value)
    {
        return SetDoubleArray(0, value);
    }

    public bool SetDoubleArray(long time, double[] value)
    {
        return NtCore.SetEntryValue(Handle, NetworkTableValue.MakeDoubleArray(time, value));
    }

    /**
     * Sets the entry's value.
     *
     * @param value the value to set
     * @return False if the entry exists with a different type
     */

    public bool SetStringArray(string[] value)
    {
        return SetStringArray(0, value);
    }

    public bool SetStringArray(long time, string[] value)
    {
        return NtCore.SetEntryValue(Handle, NetworkTableValue.MakeStringArray(time, value));
    }


    public bool SetDefault(in NetworkTableValue value)
    {
        return NtCore.SetDefaultEntryValue(Handle, value);
    }

    public bool SetDefault(in RefNetworkTableValue value)
    {
        return NtCore.SetDefaultEntryValue(Handle, value);
    }

    public bool SetDefaultValue<T>(T value)
    {
        return value switch
        {
            NetworkTableValue v => Set(v),
            bool v => SetDefault(NetworkTableValue.MakeBoolean(v)),
            double v => SetDefault(NetworkTableValue.MakeDouble(v)),
            float v => SetDefault(NetworkTableValue.MakeFloat(v)),
            string v => SetDefault(NetworkTableValue.MakeString(v)),
            bool[] v => SetDefault(NetworkTableValue.MakeBooleanArray(v)),
            double[] v => SetDefault(NetworkTableValue.MakeDoubleArray(v)),
            float[] v => SetDefault(NetworkTableValue.MakeFloatArray(v)),
            string[] v => SetDefault(NetworkTableValue.MakeStringArray(v)),
            byte[] v => SetDefault(NetworkTableValue.MakeRaw(v)),
            _ => throw new InvalidOperationException($"Value of type {value?.GetType().Name} cannot be put into a table")
        };
    }


    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */

    public bool SetDefaultBoolean(bool value)
    {
        return NtCore.SetDefaultEntryValue(Handle, NetworkTableValue.MakeBoolean(value));
    }

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */

    public bool SetDefaultInteger(long value)
    {
        return NtCore.SetDefaultEntryValue(Handle, NetworkTableValue.MakeInteger(value));
    }

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */

    public bool SetDefaultFloat(float value)
    {
        return NtCore.SetDefaultEntryValue(Handle, NetworkTableValue.MakeFloat(value));
    }

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */

    public bool SetDefaultDouble(double value)
    {
        return NtCore.SetDefaultEntryValue(Handle, NetworkTableValue.MakeDouble(value));
    }

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */

    public bool SetDefaultString(string value)
    {
        return NtCore.SetDefaultEntryValue(Handle, NetworkTableValue.MakeString(value));
    }

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */

    public bool SetDefaultRaw(byte[] value)
    {
        return NtCore.SetDefaultEntryValue(Handle, NetworkTableValue.MakeRaw(value));
    }

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */

    public bool SetDefaultBooleanArray(bool[] value)
    {
        return NtCore.SetDefaultEntryValue(Handle, NetworkTableValue.MakeBooleanArray(value));
    }

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */

    public bool SetDefaultIntegerArray(long[] value)
    {
        return NtCore.SetDefaultEntryValue(Handle, NetworkTableValue.MakeIntegerArray(value));
    }

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */

    public bool SetDefaultFloatArray(float[] value)
    {
        return NtCore.SetDefaultEntryValue(Handle, NetworkTableValue.MakeFloatArray(value));
    }

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */

    public bool SetDefaultDoubleArray(double[] value)
    {
        return NtCore.SetDefaultEntryValue(Handle, NetworkTableValue.MakeDoubleArray(value));
    }

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */

    public bool SetDefaultStringArray(string[] value)
    {
        return NtCore.SetDefaultEntryValue(Handle, NetworkTableValue.MakeStringArray(value));
    }



    public void Unpublish()
    {
        NtCore.Unpublish(Handle);
    }
}
