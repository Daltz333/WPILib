// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

namespace NetworkTables;

/** NetworkTables generic publisher. */
public interface IGenericPublisher : Publisher
{

    /**
     * Publish a new value.
     *
     * @param value value to publish
     * @return False if the topic already exists with a different type
     */
    bool Set(in NetworkTableValue value);

    bool Set(in RefNetworkTableValue value);

    /**
     * Publish a new value.
     *
     * @param value value to publish
     * @param time timestamp; 0 indicates current NT time should be used
     * @return False if the topic already exists with a different type
     * @throws IllegalArgumentException if the value is not a known type
     */
    bool SetValue<T>(long time, T value);

    bool SetValue<T>(T value);

    /**
     * Publish a new value.
     *
     * @param value value to publish
     * @param time timestamp; 0 indicates current NT time should be used
     * @return False if the topic already exists with a different type
     */
    bool SetBoolean(long time, bool value);

    bool SetBoolean(bool value);

    /**
     * Publish a new value.
     *
     * @param value value to publish
     * @param time timestamp; 0 indicates current NT time should be used
     * @return False if the topic already exists with a different type
     */
    bool SetInteger(long time, long value);

    bool SetInteger(long value);

    /**
     * Publish a new value.
     *
     * @param value value to publish
     * @param time timestamp; 0 indicates current NT time should be used
     * @return False if the topic already exists with a different type
     */
    bool SetFloat(long time, float value);

    bool SetFloat(float value);

    /**
     * Publish a new value.
     *
     * @param value value to publish
     * @param time timestamp; 0 indicates current NT time should be used
     * @return False if the topic already exists with a different type
     */
    bool SetDouble(long time, double value);

    bool SetDouble(double value);

    /**
     * Publish a new value.
     *
     * @param value value to publish
     * @param time timestamp; 0 indicates current NT time should be used
     * @return False if the topic already exists with a different type
     */
    bool SetString(long time, string value);

    bool SetString(string value);

    /**
     * Publish a new value.
     *
     * @param value value to publish
     * @param time timestamp; 0 indicates current NT time should be used
     * @return False if the topic already exists with a different type
     */
    bool SetRaw(long time, byte[] value);

    bool SetRaw(byte[] value);

    /**
     * Publish a new value.
     *
     * @param value value to publish
     * @param time timestamp; 0 indicates current NT time should be used
     * @return False if the topic already exists with a different type
     */
    bool SetBooleanArray(long time, bool[] value);

    bool SetBooleanArray(bool[] value);

    /**
     * Publish a new value.
     *
     * @param value value to publish
     * @param time timestamp; 0 indicates current NT time should be used
     * @return False if the topic already exists with a different type
     */
    bool SetIntegerArray(long time, long[] value);

    bool SetIntegerArray(long[] value);

    /**
     * Publish a new value.
     *
     * @param value value to publish
     * @param time timestamp; 0 indicates current NT time should be used
     * @return False if the topic already exists with a different type
     */
    bool SetFloatArray(long time, float[] value);

    bool SetFloatArray(float[] value);

    /**
     * Publish a new value.
     *
     * @param value value to publish
     * @param time timestamp; 0 indicates current NT time should be used
     * @return False if the topic already exists with a different type
     */
    bool SetDoubleArray(long time, double[] value);

    bool SetDoubleArray(double[] value);

    /**
     * Publish a new value.
     *
     * @param value value to publish
     * @param time timestamp; 0 indicates current NT time should be used
     * @return False if the topic already exists with a different type
     */
    bool SetStringArray(long time, string[] value);

    bool SetStringArray(string[] value);

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */
    bool SetDefault(in NetworkTableValue defaultValue);
    bool SetDefault(in RefNetworkTableValue defaultValue);

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     * @throws IllegalArgumentException if the value is not a known type
     */
    bool SetDefaultValue<T>(T defaultValue);

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */
    bool SetDefaultBoolean(bool defaultValue);

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */
    bool SetDefaultInteger(long defaultValue);

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */
    bool SetDefaultFloat(float defaultValue);

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */
    bool SetDefaultDouble(double defaultValue);

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */
    bool SetDefaultString(string defaultValue);

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */
    bool SetDefaultRaw(byte[] defaultValue);

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */
    bool SetDefaultBooleanArray(bool[] defaultValue);

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */
    bool SetDefaultIntegerArray(long[] defaultValue);

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */
    bool SetDefaultFloatArray(float[] defaultValue);

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */
    bool SetDefaultDoubleArray(double[] defaultValue);

    /**
     * Sets the entry's value if it does not exist.
     *
     * @param defaultValue the default value to set
     * @return False if the entry exists with a different type
     */
    bool SetDefaultStringArray(string[] defaultValue);

}
